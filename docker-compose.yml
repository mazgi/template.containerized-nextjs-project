x-service-node-webapp-production-base: &node-webapp-production-base
  build: &node-webapp-production-base-build
    args:
      GIT_SHORT_SHA:
    context: .
    dockerfile: Dockerfile.d/node-webapp.production/Dockerfile
    target: base
  # https://docs.docker.com/compose/compose-file/compose-file-v3/#build
  # > If you specify image as well as build, then Compose names the built image with the webapp and optional tag specified in image:
  image: local.local/${PROJECT_UNIQUE_ID:-no-name}/base-prod:HEAD
  init: false # because tiny is specified as the entrypoint on the Dockerfile
  pull_policy: never

x-service-node-webapp-development-base: &node-webapp-development-base
  build:
    args:
      GID: ${GID:-0}
      UID: ${UID:-0}
    context: Dockerfile.d/node-webapp.development
  command:
    - zsh
    - --login
    - -c
    - |
      npm-check-updates --upgrade
      npm install
      npm audit fix
      sort-package-json
      sleep infinity
  init: true
  user: ${UID:-0}:${GID:-0}
  volumes:
    - home-developer:/home/developer
    - home-root:/root # for macOS & Windows
    - .:/workspace
  working_dir: /workspace

x-service-bff-base: &bff-base
  <<: *node-webapp-development-base
  depends_on:
    mysql:
      condition: service_started
    redis:
      condition: service_started
  environment:
    ALLOW_ORIGIN: http://${PUBLIC_IP_ADDR_OR_FQDN:-frontend}:3000
  working_dir: /workspace/bff

x-service-frontend-base: &frontend-base
  <<: *node-webapp-development-base
  environment:
    FRONTEND_BFF_ENDPOINT_GRAPHQL_HTTP: http://${PUBLIC_IP_ADDR_OR_FQDN:-bff}:4000/graphql
    FRONTEND_BFF_ENDPOINT_GRAPHQL_WEBSOCKET: ws://${PUBLIC_IP_ADDR_OR_FQDN:-bff}:4000/graphql
    FRONTEND_BFF_ENDPOINT_REST: http://${PUBLIC_IP_ADDR_OR_FQDN:-bff}:4000
  working_dir: /workspace/frontend

services:
  bff:
    <<: *bff-base
    command:
      - zsh
      - --login
      - -c
      - |
        npm-check-updates --upgrade
        npm install
        npm audit fix
        sort-package-json
        /workspace/scripts/wait-redis.bash redis
        /workspace/scripts/wait-mysql.bash mysql
        npm run start:dev
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--fail',
          '--output',
          '/dev/null',
          '--silent',
          'localhost:4000/rest/status',
        ]
      interval: 8s
      timeout: 1s
      retries: 64
      start_period: 16s
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:4000:4000
      - ${BIND_IP_ADDR:-127.0.0.1}:49229:9229
  bff-test-watch:
    <<: *bff-base
    command:
      - zsh
      - --login
      - -c
      - |
        npm run test:watch
    depends_on:
      bff:
        condition: service_healthy
    profiles:
      - all
      - dev-all
  bff-prod:
    <<: *node-webapp-production-base
    build:
      <<: *node-webapp-production-base-build
      target: bff-runner
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      ALLOW_ORIGIN: http://${PUBLIC_IP_ADDR_OR_FQDN:-127.0.0.1}:13000
    image: local.local/${PROJECT_UNIQUE_ID:-no-name}/bff-prod:HEAD
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:14000:4000
    profiles:
      - all
      - prod
  e2e-tests:
    <<: *node-webapp-development-base
    build:
      args:
        GID: ${GID:-0}
        UID: ${UID:-0}
      context: Dockerfile.d/e2e-tests
    command:
      - zsh
      - --login
      - -c
      - |
        npm-check-updates --upgrade
        npm install
        npm audit fix
        sort-package-json
        npx playwright install
        sleep infinity
    environment:
      BFF_URL: http://${PUBLIC_IP_ADDR_OR_FQDN:-bff}:4000
      E2E_TARGET_NODE_ENV: development
      FRONTEND_URL: http://${PUBLIC_IP_ADDR_OR_FQDN:-frontend}:3000
    ports:
      # https://github.com/microsoft/playwright/pull/18517
      - ${BIND_IP_ADDR:-127.0.0.1}:9323:9323
    profiles:
      - all
      - dev-all
    working_dir: /workspace/e2e-tests
  frontend:
    <<: *frontend-base
    command:
      - zsh
      - --login
      - -c
      - |
        npm-check-updates --upgrade
        npm install
        npm audit fix
        sort-package-json
        npm run dev:debug
    healthcheck:
      test:
        [
          'CMD',
          'curl',
          '--fail',
          '--output',
          '/dev/null',
          '--silent',
          'localhost:3000/api/status',
        ]
      interval: 8s
      timeout: 1s
      retries: 64
      start_period: 16s
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:3000:3000
      - ${BIND_IP_ADDR:-127.0.0.1}:39229:9229
  frontend-prod:
    <<: *node-webapp-production-base
    build:
      <<: *node-webapp-production-base-build
      target: frontend-runner
    environment:
      FRONTEND_BFF_ENDPOINT_REST: http://${PUBLIC_IP_ADDR_OR_FQDN:-bff}:14000
    image: local.local/${PROJECT_UNIQUE_ID:-no-name}/frontend-prod:HEAD
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:13000:3000
    profiles:
      - all
      - prod
  frontend-storybook:
    <<: *frontend-base
    command:
      - zsh
      - --login
      - -c
      - |
        npm run storybook
    depends_on:
      frontend:
        condition: service_started
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:6006:6006
    profiles:
      - all
      - dev-all
  frontend-test-watch:
    <<: *frontend-base
    command:
      - zsh
      - --login
      - -c
      - |
        npm run test:watch
    depends_on:
      frontend:
        condition: service_healthy
    profiles:
      - all
      - dev-all

  # Middlewares
  mysql:
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: 'true'
    healthcheck:
      test: ['CMD', 'mysql', '--host=mysql', '--user=root', '--execute=quit']
      interval: 8s
      timeout: 1s
      retries: 8
      start_period: 4s
    # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Concepts.VersionMgmt.html
    # https://learn.microsoft.com/en-us/azure/mysql/concepts-version-policy#supported-mysql-versions
    # https://cloud.google.com/sql/docs/mysql/db-versions
    image: mysql:8
    init: true
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:3306:3306
    volumes:
      - .:/workspace
      # https://hub.docker.com/_/mysql
      # > Initializing a fresh instance
      # > When a container is started for the first time, a new database with the specified name will be created and initialized with the provided configuration variables.
      # > Furthermore, it will execute files with extensions .sh, .sql and .sql.gz that are found in /docker-entrypoint-initdb.d.
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
      - mysql-data:/var/lib/mysql
  redis:
    # https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html
    # https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-overview#redis-versions
    # https://cloud.google.com/memorystore/docs/redis/supported-versions#current_versions
    image: redis:6
    init: true
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 8s
      timeout: 1s
      retries: 8
      start_period: 2s
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:6379:6379
    volumes:
      - .:/workspace

  # for Prettier Code Formatter
  # ["INFO" - 00:00:00 AM] Attempted to determine module path from /path/to/the/project
  # ["ERROR" - 00:00:00 AM] Failed to load module. If you have prettier or plugins referenced in package.json, ensure you have run `npm install`
  # ["ERROR" - 00:00:00 AM] Cannot find module 'prettier' from '/path/to/the/project'
  workspace:
    <<: *node-webapp-development-base

version: '3.9'
volumes:
  home-developer:
    driver: local
  home-root:
    driver: local
  mysql-data:
    driver: local
