x-service-bff-base: &bff-base
  build:
    args:
      GID: ${GID:-0}
      UID: ${UID:-0}
      HEALTHCHECK_URL: http://localhost:4000/api/status
    context: Dockerfile.d/bff.development
  command:
    - bash
    - -c
    - |
      npm-check-updates --upgrade
      npm install
      npm audit fix
      sort-package-json
      /workspace/scripts/wait-mysql.zsh mysql
      npm run dev
  depends_on:
    - mysql
    - redis
  init: true
  ports:
    - ${BIND_IP_ADDR:-127.0.0.1}:4000:4000
  user: ${UID:-0}:${GID:-0}
  volumes:
    - .:/workspace
  working_dir: /workspace/bff

x-service-frontend-base: &frontend-base
  build:
    args:
      GID: ${GID:-0}
      UID: ${UID:-0}
      HEALTHCHECK_URL: http://localhost:3000/api/status
    context: Dockerfile.d/frontend.development
  command:
    - bash
    - -c
    - |
      npm-check-updates --upgrade
      npm install
      npm audit fix
      sort-package-json
      npm run dev
  environment:
    BFF_ENDPOINT_GRAPHQL_HTTP: http://${PUBLIC_IP_ADDR_OR_FQDN:-127.0.0.1}:4000/graphql
    BFF_ENDPOINT_GRAPHQL_WEBSOCKET: ws://${PUBLIC_IP_ADDR_OR_FQDN:-127.0.0.1}:4000/graphql
  init: true
  ports:
    # Next.js
    - ${BIND_IP_ADDR:-127.0.0.1}:3000:3000
    # StoryBook
    - ${BIND_IP_ADDR:-127.0.0.1}:6006:6006
  user: ${UID:-0}:${GID:-0}
  volumes:
    - .:/workspace
  working_dir: /workspace/frontend

services:
  bff:
    <<: *bff-base
  frontend:
    <<: *frontend-base
  mysql:
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    environment:
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    # https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/MySQL.Concepts.VersionMgmt.html
    # https://learn.microsoft.com/en-us/azure/mysql/concepts-version-policy#supported-mysql-versions
    # https://cloud.google.com/sql/docs/mysql/db-versions
    image: mysql:8
    init: true
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:3306:3306
    volumes:
      # https://hub.docker.com/_/mysql
      # > Initializing a fresh instance
      # > When a container is started for the first time, a new database with the specified name will be created and initialized with the provided configuration variables.
      # > Furthermore, it will execute files with extensions .sh, .sql and .sql.gz that are found in /docker-entrypoint-initdb.d.
      - ./mysql/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d:ro
      - mysql-data:/var/lib/mysql
  redis:
    # https://docs.aws.amazon.com/AmazonElastiCache/latest/red-ug/supported-engine-versions.html
    # https://learn.microsoft.com/en-us/azure/azure-cache-for-redis/cache-overview#redis-versions
    # https://cloud.google.com/memorystore/docs/redis/supported-versions#current_versions
    image: redis:6
    init: true
    ports:
      - ${BIND_IP_ADDR:-127.0.0.1}:6379:6379

  # for Prettier Code Formatter
  vscode:
    build:
      args:
        GID: ${GID:-0}
        UID: ${UID:-0}
      context: Dockerfile.d/vscode
    command:
      - bash
      - -c
      - |
        npm-check-updates --upgrade
        npm install
        npm audit fix
        sort-package-json
    init: true
    user: ${UID:-0}:${GID:-0}
    volumes:
      - .:/workspace
    working_dir: /workspace

version: "3.9"
volumes:
  mysql-data:
    driver: local
