name: build-production-images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  start-build-test-stop-save:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Pull images
        timeout-minutes: 4
        run: |
          docker compose\
           --file docker-compose.yml\
           --file docker-compose.overwrite.rc.yml\
           pull
      - name: Store the short SHA hash
        run: |
          echo GIT_SHORT_SHA=${GITHUB_SHA::7} >> .env

      - name: Build images
        timeout-minutes: 4
        run: |
          docker compose\
           --file docker-compose.yml\
           --file docker-compose.overwrite.rc.yml\
           build {bff,frontend}-prod
      - name: Start services
        timeout-minutes: 4
        run: |
          docker compose\
           --file docker-compose.yml\
           --file docker-compose.overwrite.rc.yml\
           up --detach {bff,frontend}-prod
      - name: Save images
        timeout-minutes: 4
        run: |
          for service in bff frontend
          do
            docker save --output tmp/docker-image-${service} local.local/${service}:HEAD
          done
      - name: Wait the service
        timeout-minutes: 4
        run: |
          for service in {bff,frontend}-prod
          do
            while :
            do
              docker compose ps --format=json ${service}\
              | jq -e '.[] | select(.Health=="healthy")' 2> /dev/null\
              && break
              sleep 1
            done
            docker compose logs ${service}
          done
      - name: Stop services
        timeout-minutes: 1
        run: |
          docker compose\
           --file docker-compose.yml\
           --file docker-compose.overwrite.rc.yml\
           down --remove-orphans\
           || true
      - name: Upload docker images
        timeout-minutes: 4
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: tmp/docker-image-*
          retention-days: 1

  publish-docker-images:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs:
      - start-build-test-stop-save
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ghcr.io
        service:
          - bff
          - frontend
    steps:
      - uses: actions/checkout@v3
      - name: Download docker images
        timeout-minutes: 4
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: tmp/
      - name: Load the docker image - ${{ matrix.service }}
        timeout-minutes: 1
        run: |
          docker load --input tmp/docker-image-${{ matrix.service }}
      - name: (Test)list docker images
        run: |
          docker images
      #
      # Generate the tag
      - name: Store the short SHA hash
        run: |
          echo SHORT_SHA=$(echo '${{ toJSON(github) }}' | jq -r '.sha[0:7]') >> $GITHUB_ENV
      - name: Generate the docker tag suffix using the git tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo TAG_SUFFIX="${GITHUB_REF#refs/*/}-${SHORT_SHA}" >> $GITHUB_ENV
      - name: Generate the docker tag suffix using the current date
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo TAG_SUFFIX="$(date +%Y%m-)${SHORT_SHA}" >> $GITHUB_ENV
      #
      # Publish images to the registry - ghcr.io
      - name: Generate tag prefix for ghcr.io
        if: ${{ matrix.platform == 'ghcr.io' }}
        run: |
          echo TAG_PREFIX="${{ matrix.platform }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}" >> $GITHUB_ENV
      - name: Login to ghcr.io
        if: ${{ matrix.platform == 'ghcr.io' }}
        run: |
          echo ${{ secrets.TOKEN_TO_PUSH_GHCR }} | docker login ghcr.io --username ${{ github.repository_owner }} --password-stdin

      - name: Push the image - ${{ matrix.service }}, ${{ matrix.platform }}
        run: |
          docker tag local.local/${{ matrix.service }}:HEAD ${TAG_PREFIX}:${TAG_SUFFIX}
          docker push ${TAG_PREFIX}:${TAG_SUFFIX}
      - name: Push the image as latest - ${{ matrix.service }}, ${{ matrix.platform }}
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag local.local/${{ matrix.service }}:HEAD ${TAG_PREFIX}:latest
          docker push ${TAG_PREFIX}:latest

  cleanup-artifacts:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    needs:
      - publish-docker-images
    steps:
      - uses: actions/checkout@v3
      # Todo: total_count is always 0
      - name: List artifacts in this run
        timeout-minutes: 1
        env:
          GH_TOKEN: ${{ secrets.TOKEN_READ_WRITE_ACTIONS }}
        run: |
          gh api\
           -H "Accept: application/vnd.github+json"\
           "/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}/artifacts"\
           | jq .\
           | tee tmp/artifacts.json
      - name: Remove artifacts
        timeout-minutes: 4
        env:
          GH_TOKEN: ${{ secrets.TOKEN_READ_WRITE_ACTIONS }}
        run: |
          if $(jq --exit-status '.total_count > 0' tmp/artifacts.json > /dev/null 2>&1); then
            jq --raw-output '.artifacts | .[] | .id' tmp/artifacts.json\
             | xargs -I'{id}'\
             gh api\
             -H "Accept: application/vnd.github+json"\
             "/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/artifacts/{id}"\
             | jq .
          fi
