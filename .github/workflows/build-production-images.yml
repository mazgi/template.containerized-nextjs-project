name: build-production-images

on:
  pull_request:
    types:
      - labeled
  push:
    tags:
      - 'v*'
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  start-build-test-stop-save:
    # Todo: labeled, tagged, and pushed to main
    # if: contains(github.event.pull_request.labels.*.name, 'ready-for-production-build')
    timeout-minutes: 10
    # See https://github.com/microsoft/playwright/issues/15764
    runs-on: ubuntu-22.04
    #
    # The steps are crossing to reduce the minutes in actions :money_with_wings:
    steps:
      - uses: actions/checkout@v3
      #
      # To validate production images: (1/4)
      - name: Pull images
        timeout-minutes: 4
        run: |
          docker compose pull
      - name: Start Middlewares in the background
        timeout-minutes: 1
        run: |
          docker compose up --detach mysql redis
      #
      # To build and upload production images: (1/3)
      - name: Build images
        timeout-minutes: 4
        run: |
          docker compose\
           build --build-arg=GIT_SHORT_SHA=${GITHUB_SHA::7}\
           {bff,frontend}-prod e2e-tests
      #
      # To validate production images: (2/4)
      - name: Wait Redis
        timeout-minutes: 1
        run: |
          docker compose run redis /workspace/scripts/wait-redis.bash redis
      - name: Wait MySQL
        timeout-minutes: 1
        run: |
          docker compose run mysql /workspace/scripts/wait-mysql.bash mysql
      - name: Start services in the background
        timeout-minutes: 4
        run: |
          docker compose up --detach {bff,frontend}-prod e2e-tests
      #
      # To build and upload production images: (2/3)
      - name: Save images
        timeout-minutes: 4
        run: |
          for service in bff frontend
          do
            docker save --output tmp/docker-image-${service} local.local/no-name/${service}-prod:HEAD
          done
      #
      # To validate production images: (3/4)
      - name: Show logs - bff-prod
        timeout-minutes: 1
        run: |
          docker compose logs bff-prod
      - name: Show logs - frontend-prod
        timeout-minutes: 1
        run: |
          docker compose logs frontend-prod
      - name: Wait services
        timeout-minutes: 4
        run: |
          while :
          do
            docker compose ps {bff,frontend}-prod
            test '["bff-prod","frontend-prod"]' = "$(
              docker compose ps {bff,frontend}-prod --format=json\
               | jq --compact-output '[.[] | select(.Health=="healthy") | .Service] | sort' 2> /dev/null
            )" && break
            sleep 4
          done
          docker compose logs
      - name: Show logs - bff-prod
        timeout-minutes: 1
        run: |
          docker compose logs bff-prod
      - name: Show logs - frontend-prod
        timeout-minutes: 1
        run: |
          docker compose logs frontend-prod
      #
      # To validate production images: (4/4)
      - name: List e2e tests
        timeout-minutes: 1
        run: |
          docker compose exec\
           --env=BFF_URL=http://bff-prod:4000\
           --env=E2E_TARGET_NODE_ENV=production\
           --env=FRONTEND_URL=http://frontend-prod:3000\
           e2e-tests npm run test -- --list
      - name: Run e2e tests
        timeout-minutes: 4
        run: |
          docker compose exec\
           --env=BFF_URL=http://bff-prod:4000\
           --env=E2E_TARGET_NODE_ENV=production\
           --env=FRONTEND_URL=http://frontend-prod:3000\
           e2e-tests npm run test -- --reporter=line
      #
      # Clean up
      - name: Stop services
        timeout-minutes: 1
        run: |
          docker compose --profile=all down
      #
      # To build and upload production images: (3/3)
      - name: Upload docker images as artifact
        timeout-minutes: 4
        uses: actions/upload-artifact@v3
        with:
          name: docker-images
          path: tmp/docker-image-*
          retention-days: 1

  publish-docker-images:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    needs:
      - start-build-test-stop-save
    strategy:
      fail-fast: false
      matrix:
        platform:
          - ghcr.io
        service:
          - bff
          - frontend
    steps:
      - uses: actions/checkout@v3
      - name: Download docker images
        timeout-minutes: 4
        uses: actions/download-artifact@v3
        with:
          name: docker-images
          path: tmp/
      - name: Load the docker image - ${{ matrix.service }}
        timeout-minutes: 1
        run: |
          docker load --input tmp/docker-image-${{ matrix.service }}
      - name: (Test)list docker images
        run: |
          docker images
      #
      # Generate the tag
      - name: Store the short SHA hash
        run: |
          echo SHORT_SHA=$(echo '${{ toJSON(github) }}' | jq -r '.sha[0:7]') >> $GITHUB_ENV
      - name: Generate the docker tag suffix using the git tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          echo TAG_SUFFIX="${GITHUB_REF#refs/*/}-${SHORT_SHA}" >> $GITHUB_ENV
      - name: Generate the docker tag suffix using the current date
        if: ${{ !startsWith(github.ref, 'refs/tags/v') }}
        run: |
          echo TAG_SUFFIX="$(date +%Y%m-)${SHORT_SHA}" >> $GITHUB_ENV
      #
      # Tag the image to the registry - ghcr.io
      - name: Generate tag prefix for ghcr.io
        if: ${{ matrix.platform == 'ghcr.io' }}
        run: |
          echo TAG_PREFIX="${{ matrix.platform }}/${{ github.repository_owner }}/${{ github.event.repository.name }}-${{ matrix.service }}" >> $GITHUB_ENV
      - name: Login to ghcr.io
        if: ${{ matrix.platform == 'ghcr.io' }}
        run: |
          echo ${{ secrets.TOKEN_TO_PUSH_GHCR }} | docker login ghcr.io --username ${{ github.repository_owner }} --password-stdin

      # Push the image to the registry
      - name: Push the image - ${{ matrix.service }}, ${{ matrix.platform }}
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          docker tag local.local/no-name/${{ matrix.service }}-prod:HEAD ${TAG_PREFIX}:${TAG_SUFFIX}
          docker push ${TAG_PREFIX}:${TAG_SUFFIX}
      - name: Push the image as latest - ${{ matrix.service }}, ${{ matrix.platform }}
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag local.local/no-name/${{ matrix.service }}-prod:HEAD ${TAG_PREFIX}:latest
          docker push ${TAG_PREFIX}:latest

  cleanup-artifacts:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    needs:
      - publish-docker-images
    steps:
      - uses: actions/checkout@v3
      # Todo: total_count is always 0
      - name: List artifacts in this run
        timeout-minutes: 1
        env:
          GH_TOKEN: ${{ secrets.TOKEN_READ_WRITE_ACTIONS }}
        run: |
          gh api\
           -H "Accept: application/vnd.github+json"\
           "/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/runs/${{ github.run_id }}/artifacts"\
           | jq .\
           | tee tmp/artifacts.json
      - name: Remove artifacts
        timeout-minutes: 4
        env:
          GH_TOKEN: ${{ secrets.TOKEN_READ_WRITE_ACTIONS }}
        run: |
          if $(jq --exit-status '.total_count > 0' tmp/artifacts.json > /dev/null 2>&1); then
            jq --raw-output '.artifacts | .[] | .id' tmp/artifacts.json\
             | xargs -I'{id}'\
             gh api\
             -H "Accept: application/vnd.github+json"\
             "/repos/${{ github.repository_owner }}/${{ github.event.repository.name }}/actions/artifacts/{id}"\
             | jq .
          fi
