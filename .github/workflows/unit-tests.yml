name: unit-tests

on:
  push:
  workflow_dispatch:

env:
  DOCKER_BUILDKIT: 1

jobs:
  start-test-stop:
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service:
          - bff
          - frontend
    steps:
      - uses: actions/checkout@v3
      #
      # Cache settings
      - name: cache the pnpm store
        uses: actions/cache@v3
        with:
          path: .pnpm-store
          key: ${{ runner.os }}-dotpnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
      - name: cache user deps
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-dotnpm-${{ hashFiles('**/package-lock.json') }}
      - name: cache workspace deps
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ runner.os }}-node_modules-${{ hashFiles('package-lock.json') }}
      - name: cache service deps - ${{ matrix.service }}
        uses: actions/cache@v3
        with:
          path: ${{ matrix.service }}/node_modules
          key: ${{ runner.os }}-${{ matrix.service }}-node_modules-${{ hashFiles('${{ matrix.service }}/package-lock.json') }}
      #
      # Envirinment settings
      - name: Export UIDs as environment variables
        run: |
          echo "GID=$(id -g)" >> $GITHUB_ENV
          echo "UID=$(id -u)" >> $GITHUB_ENV
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Build the docker image - default
        timeout-minutes: 4
        uses: docker/build-push-action@v3
        with:
          build-args: |
            GID=${{ env.GID }}
            UID=${{ env.UID }}
          cache-from: |
            type=gha
          cache-to: |
            type=gha,mode=max
          context: Dockerfile.d/node-webapp.development
          target: default
      #
      # Prepare services
      - name: Pull containers - ${{ matrix.service }}
        timeout-minutes: 4
        run: |
          docker compose pull --include-deps ${{ matrix.service }}
      - name: Build containers - ${{ matrix.service }}
        timeout-minutes: 4
        run: |
          docker compose build ${{ matrix.service }}
      - name: (debug) List images
        timeout-minutes: 8
        run: |
          docker images
      - name: Start the service - ${{ matrix.service }}
        timeout-minutes: 2
        run: |
          docker compose up --wait ${{ matrix.service }}
      - name: Wait the service - ${{ matrix.service }}
        timeout-minutes: 4
        run: |
          while :
          do
            docker compose ps --format=json ${{ matrix.service }}\
             | jq --exit-status '.[] | select(.Health=="healthy")' 2> /dev/null\
             && break
            sleep 1
          done
          docker compose logs ${{ matrix.service }}
      - name: Show logs - bff
        run: |
          docker compose logs bff
      - name: Show logs - frontend
        run: |
          docker compose logs frontend

      #
      # Test services
      - name: Test the service - ${{ matrix.service }}
        timeout-minutes: 4
        run: |
          docker compose exec ${{ matrix.service }} npm run test:ci
      - name: Lint the service - ${{ matrix.service }}
        timeout-minutes: 4
        run: |
          docker compose exec ${{ matrix.service }} npm run lint
      #
      # Clean up
      - name: Stop services
        timeout-minutes: 1
        run: |
          docker compose down
